+ragged_giis = [torch.nn.functional.pad(torch.unsqueeze(gii, dim=0), (0, maxLg-gii.shape[0])) for gii in g[sl]]
+giis = torch.conj(torch.cat(ragged_giis))
+
+f = torch.cat([torch.unsqueeze(f, dim=0) for f in f_slices])
+ft = fft(f)
+
+Ls = f.shape[-1]
+
+assert nn == Ls
+
+c = torch.empty(f.shape[0], len(loopparams), maxLg, dtype=ft.dtype, device=get_torch_device())
+
+for j, (mii,win_range,Lg,col) in enumerate(loopparams):
+    t = ft[:, win_range]*torch.fft.fftshift(torch.conj(giis[j, :Lg]))
+
+    c[:, j, :(Lg+1)//2] = t[:, Lg//2:]  # if mii is odd, this is of length mii-mii//2
+    c[:, j, -(Lg//2):] = t[:, :Lg//2]  # if mii is odd, this is of length mii//2
+    c[:, j, (Lg+1)//2:-(Lg//2)] = 0  # clear gap (if any)
+
+y = ifft(c)
+
+return y
