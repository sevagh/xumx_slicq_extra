- scaler = sklearn.preprocessing.StandardScaler()

+ # slicq is a list of tensors so we need a list of scalers
+ scalers = [sklearn.preprocessing.StandardScaler() for i in range(time_blocks)]
 
for index in dataset:
    x = dataset_scaler[index][0]

-    # encoder = abs(stft)
-    X = encoder(x[None, ...]).mean(1, keepdim=False).permute(0, 2, 1)
- 
-    scaler.partial_fit(np.squeeze(X))
 
+    # encoder = abs(slicqt)
+    X = encoder(x[None, ...])
 
+    # loop over and overlap-add each tensor in the ragged transform
+    for i, X_block in enumerate(X):
+        X_block_ola = np.squeeze(transforms.overlap_add_slicq(X_block).mean(1, keepdim=False).permute(0, 2, 1), axis=0)
+        scalers[i].partial_fit(X_block_ola)

- # set inital input scaler values
- std = np.maximum(scaler.scale_, 1e-4 * np.max(scaler.scale_))
- return scaler.mean_, std

+ # set inital input scaler values
+ std = [np.maximum(scaler.scale_, 1e-4 * np.max(scaler.scale_)) for scaler in scalers]
+ return [scaler.mean_ for scaler in scalers], std
